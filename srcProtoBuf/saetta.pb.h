// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: saetta.proto

#ifndef PROTOBUF_saetta_2eproto__INCLUDED
#define PROTOBUF_saetta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Saetta_Server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_saetta_2eproto();
void protobuf_AssignDesc_saetta_2eproto();
void protobuf_ShutdownFile_saetta_2eproto();

class Server_Info;
class Server_Info_Client;
class Ping;

// ===================================================================

class Server_Info_Client : public ::google::protobuf::Message {
 public:
  Server_Info_Client();
  virtual ~Server_Info_Client();
  
  Server_Info_Client(const Server_Info_Client& from);
  
  inline Server_Info_Client& operator=(const Server_Info_Client& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server_Info_Client& default_instance();
  
  void Swap(Server_Info_Client* other);
  
  // implements Message ----------------------------------------------
  
  Server_Info_Client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server_Info_Client& from);
  void MergeFrom(const Server_Info_Client& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // optional string status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // @@protoc_insertion_point(class_scope:Saetta_Server.Server_Info.Client)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* address_;
  ::std::string* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_saetta_2eproto();
  friend void protobuf_AssignDesc_saetta_2eproto();
  friend void protobuf_ShutdownFile_saetta_2eproto();
  
  void InitAsDefaultInstance();
  static Server_Info_Client* default_instance_;
};
// -------------------------------------------------------------------

class Server_Info : public ::google::protobuf::Message {
 public:
  Server_Info();
  virtual ~Server_Info();
  
  Server_Info(const Server_Info& from);
  
  inline Server_Info& operator=(const Server_Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server_Info& default_instance();
  
  void Swap(Server_Info* other);
  
  // implements Message ----------------------------------------------
  
  Server_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server_Info& from);
  void MergeFrom(const Server_Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Server_Info_Client Client;
  
  // accessors -------------------------------------------------------
  
  // required string time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  
  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // repeated .Saetta_Server.Server_Info.Client known_clients = 3;
  inline int known_clients_size() const;
  inline void clear_known_clients();
  static const int kKnownClientsFieldNumber = 3;
  inline const ::Saetta_Server::Server_Info_Client& known_clients(int index) const;
  inline ::Saetta_Server::Server_Info_Client* mutable_known_clients(int index);
  inline ::Saetta_Server::Server_Info_Client* add_known_clients();
  inline const ::google::protobuf::RepeatedPtrField< ::Saetta_Server::Server_Info_Client >&
      known_clients() const;
  inline ::google::protobuf::RepeatedPtrField< ::Saetta_Server::Server_Info_Client >*
      mutable_known_clients();
  
  // @@protoc_insertion_point(class_scope:Saetta_Server.Server_Info)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_address();
  inline void clear_has_address();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* time_;
  ::std::string* address_;
  ::google::protobuf::RepeatedPtrField< ::Saetta_Server::Server_Info_Client > known_clients_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_saetta_2eproto();
  friend void protobuf_AssignDesc_saetta_2eproto();
  friend void protobuf_ShutdownFile_saetta_2eproto();
  
  void InitAsDefaultInstance();
  static Server_Info* default_instance_;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message {
 public:
  Ping();
  virtual ~Ping();
  
  Ping(const Ping& from);
  
  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();
  
  void Swap(Ping* other);
  
  // implements Message ----------------------------------------------
  
  Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated string timestamp = 2;
  inline int timestamp_size() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::std::string& timestamp(int index) const;
  inline ::std::string* mutable_timestamp(int index);
  inline void set_timestamp(int index, const ::std::string& value);
  inline void set_timestamp(int index, const char* value);
  inline void set_timestamp(int index, const char* value, size_t size);
  inline ::std::string* add_timestamp();
  inline void add_timestamp(const ::std::string& value);
  inline void add_timestamp(const char* value);
  inline void add_timestamp(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& timestamp() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_timestamp();
  
  // repeated uint64 itimestamp = 3;
  inline int itimestamp_size() const;
  inline void clear_itimestamp();
  static const int kItimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 itimestamp(int index) const;
  inline void set_itimestamp(int index, ::google::protobuf::uint64 value);
  inline void add_itimestamp(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      itimestamp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_itimestamp();
  
  // @@protoc_insertion_point(class_scope:Saetta_Server.Ping)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> timestamp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > itimestamp_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_saetta_2eproto();
  friend void protobuf_AssignDesc_saetta_2eproto();
  friend void protobuf_ShutdownFile_saetta_2eproto();
  
  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// ===================================================================


// ===================================================================

// Server_Info_Client

// required string name = 1;
inline bool Server_Info_Client::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server_Info_Client::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server_Info_Client::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server_Info_Client::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Server_Info_Client::name() const {
  return *name_;
}
inline void Server_Info_Client::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Server_Info_Client::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Server_Info_Client::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server_Info_Client::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Server_Info_Client::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string address = 2;
inline bool Server_Info_Client::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server_Info_Client::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server_Info_Client::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server_Info_Client::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Server_Info_Client::address() const {
  return *address_;
}
inline void Server_Info_Client::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Server_Info_Client::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Server_Info_Client::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server_Info_Client::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Server_Info_Client::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string status = 3;
inline bool Server_Info_Client::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Server_Info_Client::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Server_Info_Client::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Server_Info_Client::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& Server_Info_Client::status() const {
  return *status_;
}
inline void Server_Info_Client::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Server_Info_Client::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Server_Info_Client::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server_Info_Client::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* Server_Info_Client::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Server_Info

// required string time = 1;
inline bool Server_Info::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server_Info::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server_Info::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server_Info::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Server_Info::time() const {
  return *time_;
}
inline void Server_Info::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Server_Info::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Server_Info::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server_Info::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* Server_Info::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string address = 2;
inline bool Server_Info::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server_Info::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server_Info::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server_Info::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Server_Info::address() const {
  return *address_;
}
inline void Server_Info::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Server_Info::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Server_Info::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server_Info::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Server_Info::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Saetta_Server.Server_Info.Client known_clients = 3;
inline int Server_Info::known_clients_size() const {
  return known_clients_.size();
}
inline void Server_Info::clear_known_clients() {
  known_clients_.Clear();
}
inline const ::Saetta_Server::Server_Info_Client& Server_Info::known_clients(int index) const {
  return known_clients_.Get(index);
}
inline ::Saetta_Server::Server_Info_Client* Server_Info::mutable_known_clients(int index) {
  return known_clients_.Mutable(index);
}
inline ::Saetta_Server::Server_Info_Client* Server_Info::add_known_clients() {
  return known_clients_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Saetta_Server::Server_Info_Client >&
Server_Info::known_clients() const {
  return known_clients_;
}
inline ::google::protobuf::RepeatedPtrField< ::Saetta_Server::Server_Info_Client >*
Server_Info::mutable_known_clients() {
  return &known_clients_;
}

// -------------------------------------------------------------------

// Ping

// required int32 id = 1;
inline bool Ping::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ping::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ping::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ping::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Ping::id() const {
  return id_;
}
inline void Ping::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated string timestamp = 2;
inline int Ping::timestamp_size() const {
  return timestamp_.size();
}
inline void Ping::clear_timestamp() {
  timestamp_.Clear();
}
inline const ::std::string& Ping::timestamp(int index) const {
  return timestamp_.Get(index);
}
inline ::std::string* Ping::mutable_timestamp(int index) {
  return timestamp_.Mutable(index);
}
inline void Ping::set_timestamp(int index, const ::std::string& value) {
  timestamp_.Mutable(index)->assign(value);
}
inline void Ping::set_timestamp(int index, const char* value) {
  timestamp_.Mutable(index)->assign(value);
}
inline void Ping::set_timestamp(int index, const char* value, size_t size) {
  timestamp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ping::add_timestamp() {
  return timestamp_.Add();
}
inline void Ping::add_timestamp(const ::std::string& value) {
  timestamp_.Add()->assign(value);
}
inline void Ping::add_timestamp(const char* value) {
  timestamp_.Add()->assign(value);
}
inline void Ping::add_timestamp(const char* value, size_t size) {
  timestamp_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Ping::timestamp() const {
  return timestamp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Ping::mutable_timestamp() {
  return &timestamp_;
}

// repeated uint64 itimestamp = 3;
inline int Ping::itimestamp_size() const {
  return itimestamp_.size();
}
inline void Ping::clear_itimestamp() {
  itimestamp_.Clear();
}
inline ::google::protobuf::uint64 Ping::itimestamp(int index) const {
  return itimestamp_.Get(index);
}
inline void Ping::set_itimestamp(int index, ::google::protobuf::uint64 value) {
  itimestamp_.Set(index, value);
}
inline void Ping::add_itimestamp(::google::protobuf::uint64 value) {
  itimestamp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Ping::itimestamp() const {
  return itimestamp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Ping::mutable_itimestamp() {
  return &itimestamp_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Saetta_Server

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_saetta_2eproto__INCLUDED
